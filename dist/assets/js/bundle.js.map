{"version":3,"file":"js/bundle.js","mappings":"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","sources":["webpack://static-dev-template/./src/js/index.js"],"sourcesContent":["import \"../scss/style.scss\";\n\nconsole.log(\"index.js is loading!!\");\n\n// import {Form} from \"./modules/Form\";\nexport class Form {\n  constructor(form) {\n    this.form = form;\n    this.confirmCheckbox = this.form.querySelector(`[name=\"agree\"]`);\n    this.inputElement = this.form.querySelectorAll(\"input, textarea\");\n    this.confirmButton = this.form.querySelector(\".js-confirm-button\");\n    this.fixButton = this.form.querySelector(\".js-fix-button\");\n    this.submitButton = this.form.querySelector(\".js-submit-button\");\n  }\n\n  init() {\n    const isContactPage = document.URL.match(/contact\\//) != null;\n    if (isContactPage) {\n      this.checkConfirmIsDisabled(this.confirmCheckbox);\n    }\n  }\n\n  handleEvent() {\n    const isContactPage = document.URL.match(/contact\\//) != null;\n    const isConfirmPage = document.URL.match(/contact-confirm\\//) != null;\n\n    if (isContactPage) {\n      this.handleSubmitDisabled(this.confirmCheckbox);\n      this.handleClickConfirmButton(this.confirmButton);\n    }\n\n    if (isConfirmPage) {\n      this.setValueOnConfirmPage();\n      this.handleBackToContactPage(this.fixButton);\n      this.handleSubmitFormData(this.submitButton);\n    }\n  }\n\n  handleSubmitDisabled(checkbox) {\n    checkbox.addEventListener(\"click\", () => {\n      this.checkConfirmIsDisabled(this.confirmCheckbox);\n    });\n  }\n\n  handleClickConfirmButton(confirmButton) {\n    confirmButton.addEventListener(\"click\", () => {\n      this.confirmButtonEvent(this.form, this.inputElement);\n    });\n  }\n\n  handleBackToContactPage(fixButton) {\n    fixButton.addEventListener(\"click\", () => {\n      this.backToContactPage();\n    });\n  }\n\n  handleSubmitFormData(submitButton) {\n    submitButton.addEventListener(\"click\", () => {\n      this.submitFormData(this.form);\n    });\n  }\n\n  checkConfirmIsDisabled(checkbox) {\n    if (checkbox.checked) {\n      this.confirmButton.setAttribute(\"aria-disabled\", false);\n      this.confirmButton.disabled = false;\n    } else {\n      this.confirmButton.setAttribute(\"aria-disabled\", true);\n      this.confirmButton.disabled = true;\n    }\n  }\n\n  confirmButtonEvent(form, inputElement) {\n    this.displayValidation(inputElement);\n\n    const isValid = form.checkValidity();\n    if (isValid) {\n      this.setFormToStorage(form);\n      this.moveConfirmPage();\n    }\n  }\n\n  setFormToStorage() {\n    const formData = new FormData(this.form);\n    const arrayFormData = [...formData.entries()].map((data) => {\n      const obj = { name: data[0], value: data[1] };\n      return obj;\n    });\n    const convertedFormData = JSON.stringify(arrayFormData);\n    sessionStorage.setItem(\"form\", convertedFormData);\n  }\n\n  displayValidation(inputElement) {\n    inputElement.forEach((targetInput) => {\n      const targetName = targetInput.getAttribute(\"name\");\n      const invalidMessage = targetInput.getAttribute(\"title\");\n      const messageArea = this.form.querySelectorAll(\n        `[data-validation=\"${targetName}\"]`\n      );\n      const hasValidateMessage =\n        messageArea !== null && targetInput.hasAttribute(\"title\");\n\n      const isValid = targetInput.validity.valid;\n\n      targetInput.setAttribute(\"data-is-valid\", isValid);\n\n      if (hasValidateMessage) {\n        messageArea[0].innerHTML = isValid ? \"\" : invalidMessage;\n      }\n\n      return;\n    });\n  }\n\n  moveConfirmPage() {\n    const url = document.URL.replace(/contact\\//, \"contact-confirm\");\n    location.href = url;\n  }\n\n  backToContactPage() {\n    window.history.back(-1);\n    return false;\n  }\n\n  setValueOnConfirmPage() {\n    if (sessionStorage.getItem(\"form\")) {\n      const parsedFormData = JSON.parse(sessionStorage.getItem(\"form\"));\n\n      parsedFormData.forEach((data, index) => {\n        const valueArea = this.form.querySelectorAll(\".js-input-value\");\n        const length = valueArea.length;\n\n        if (0 <= index && index < length) {\n          valueArea[index].innerHTML = data.value;\n        }\n      });\n    }\n  }\n\n  submitFormData() {\n    if (sessionStorage.getItem(\"form\")) {\n      const parsedFormData = JSON.parse(sessionStorage.getItem(\"form\"));\n      const formData = new FormData();\n      parsedFormData.map((data) => {\n        formData.append(data.name, data.value);\n      });\n\n      const url = document.URL.replace(/contact-confirm\\//, \"contact-thanks\");\n\n      fetch(\"../assets/api/contact.php\", {\n        method: \"POST\",\n        body: formData,\n      })\n        .then((res) => res.text())\n        .then(() => {\n          sessionStorage.removeItem(\"form\");\n          location.href = url;\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n\n      // $.ajax({\n      //   url: \"http://pixel-hearts.lolipop.jp/staging/form-template/assets/api/contact.php\",\n      //   type: \"POST\",\n      //   processData: false,\n      //   contentType: false,\n      //   data: formData,\n      //   success: function () {\n      //     sessionStorage.removeItem(\"form\");\n      //     location.href = url;\n      //   },\n      //   error: function (XMLHttpRequest, textStatus, errorThrown) {\n      //     console.log(XMLHttpRequest.status);\n      //     console.log(textStatus);\n      //     console.log(errorThrown.message);\n      //     console.log(\"error\");\n      //   },\n      // });\n    }\n  }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const formElement = document.querySelector(\"#contact-form\");\n  const hasFormElement = formElement != null;\n  if (hasFormElement) {\n    const form = new Form(formElement);\n    form.init();\n    form.handleEvent();\n  }\n});\n"],"names":["console","log","Form","constructor","form","this","confirmCheckbox","querySelector","inputElement","querySelectorAll","confirmButton","fixButton","submitButton","init","document","URL","match","checkConfirmIsDisabled","handleEvent","isContactPage","isConfirmPage","handleSubmitDisabled","handleClickConfirmButton","setValueOnConfirmPage","handleBackToContactPage","handleSubmitFormData","checkbox","addEventListener","confirmButtonEvent","backToContactPage","submitFormData","checked","setAttribute","disabled","displayValidation","checkValidity","setFormToStorage","moveConfirmPage","arrayFormData","FormData","entries","map","data","name","value","convertedFormData","JSON","stringify","sessionStorage","setItem","forEach","targetInput","targetName","getAttribute","invalidMessage","messageArea","hasValidateMessage","hasAttribute","isValid","validity","valid","innerHTML","url","replace","location","href","window","history","back","getItem","parse","index","valueArea","length","parsedFormData","formData","append","fetch","method","body","then","res","text","removeItem","catch","error","formElement"],"sourceRoot":""}